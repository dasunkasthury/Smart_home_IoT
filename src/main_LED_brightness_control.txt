#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <BH1750.h>
#include <Wire.h>

#define WIFI_SSID "DK_MAX"
#define WIFI_PASSWORD "$@mpatha_637-208511"

#define API_KEY "AIzaSyBWxCAsEJW5umn9ypxTVVKghVQxgv1zifQ";
#define DATABASE_URL "https://esp32-home-932a5-default-rtdb.asia-southeast1.firebasedatabase.app/";

#define USER_EMAIL "dasunkasthury.ebay@gmail.com";
#define USER_PASSWORD "ABC1234567";

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPreMillis = 0;

unsigned long previousMillis_updateBrightness = 0; // Stores the last time the task was executed

// for motor ------------------------
const int motorPin = 12;
const int pwmChannel = 0;
const int freq = 1000;    // Frequency in Hz
const int resolution = 8; // Resolution in bits (8 bits = 0-255)

BH1750 lightMeter(0x23);

// FreeRTOS========================

TaskHandle_t updteBrightnessHandle = NULL;
const int WIFI_TIMEOUT_MS = 1000;

int count = 0;

// void updteBrightness(void *parameters)
// {
//   for (;;)
//   {
//     if (Firebase.ready())
//     {
//       if (lightMeter.measurementReady())
//       {
//         float lux = lightMeter.readLightLevel();
//         Firebase.RTDB.setInt(&fbdo, "/led/room_brightness", (int)lux);
//         Serial.print("Light: ");
//         Serial.print(lux);
//         Serial.println(" ****************  lx");
//       }
//     }
//     // Serial.print("Task 1 counter :  ");
//     // Serial.println(count++);
//     vTaskDelay(1000 / portTICK_PERIOD_MS);
//   }
// }

// void keepWiFiAlive(void *parameters)
// {
//   for (;;)
//   {
//     if (WiFi.status() == WL_CONNECTED)
//     {
//       Serial.println("WiFi still connected ");
//       vTaskDelay(10000 / portTICK_PERIOD_MS);
//       continue;
//     }
//     Serial.print("WiFi Connecting ");
//     WiFi.mode(WIFI_STA);
//     WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

//     unsigned long StartAttemptTime = millis();

//     while (WiFi.status() != WL_CONNECTED && millis() - StartAttemptTime < WIFI_TIMEOUT_MS)
//     {
//       Serial.print(".");
//       delay(300);
//     }

//     if (WiFi.status() != WL_CONNECTED)
//     {
//       Serial.println("[WiFi] Failed ");
//       vTaskDelay(2000 / portTICK_PERIOD_MS);
//       continue;
//     }

//     Serial.println();
//     Serial.print("Connected with IP: ");
//     Serial.println(WiFi.localIP());
//     Serial.println();
//   }
// }

// END  FreeRTOS========================
void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  // pinMode(motorPin, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);

  Serial.begin(921600);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  // xTaskCreatePinnedToCore(
  //     keepWiFiAlive,
  //     "keepWiFiAlive",
  //     5000,
  //     NULL,
  //     1,
  //     NULL,
  //     CONFIG_ARDUINO_RUNNING_CORE);

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the user sign in credentials */
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  // Comment or pass false value when WiFi reconnection will control by your code or third party library e.g. WiFiManager
  Firebase.reconnectNetwork(true);

  // Since v4.4.x, BearSSL engine was used, the SSL buffer need to be set.
  // Large data transmission may require larger RX buffer, otherwise connection issue or data read time out can be occurred.
  fbdo.setBSSLBufferSize(4096 /* Rx buffer size in bytes from 512 - 16384 */, 1024 /* Tx buffer size in bytes from 512 - 16384 */);

  // Limit the size of response payload to be collected in FirebaseData
  fbdo.setResponseSize(2048);

  Firebase.begin(&config, &auth);

  Firebase.setDoubleDigits(5);

  config.timeout.serverResponse = 10 * 1000;

  sendDataPreMillis = 0;

  // Configure the PWM functionalitites
  ledcSetup(pwmChannel, freq, resolution);
  ledcAttachPin(motorPin, pwmChannel);

  Wire.begin();

  if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE))
  {
    Serial.println(F("BH1750 Advanced begin"));
  }
  else
  {
    Serial.println(F("Error initialising BH1750"));
  }

  // xTaskCreatePinnedToCore(
  //     updteBrightness,
  //     "updteBrightness",
  //     5000,
  //     NULL,
  //     1,
  //     &updteBrightnessHandle,
  //     CONFIG_ARDUINO_RUNNING_CORE);
}

void loop()
{

  // if (count > 3 && task1Handle != NULL)
  // {
  //   vTaskSuspend(task1Handle);
  // }

  // if (count > 3 && task1Handle != NULL) // to resume the task again
  // {
  //   vTaskResume(task1Handle);
  // }

  // vTaskSuspendAll(); // to stop all the tasks
  // // Inbetween any of the task will run
  // xTaskResumeAll(); // to resume all the tasks

  if (Firebase.ready() && (millis() - sendDataPreMillis > 1000 || sendDataPreMillis == 0))
  {
    sendDataPreMillis = millis();
    if (lightMeter.measurementReady() && (millis() - previousMillis_updateBrightness > 2000 || previousMillis_updateBrightness == 0))
    {
      previousMillis_updateBrightness = millis();
      float lux = lightMeter.readLightLevel();
      Firebase.RTDB.setInt(&fbdo, "/led/room_brightness", (int)lux);
      Serial.print("Light: ");
      Serial.print(lux);
      Serial.println(" ****************  lx");
    }

    int ledBright = Firebase.RTDB.getInt(&fbdo, "/led/bright", &ledBright) ? ledBright : 100;

    Serial.print(ledBright);

    ledcWrite(pwmChannel, ledBright);

    int ledState;
    Serial.print("LED status ----------------- > > > : ");
    if (Firebase.RTDB.getInt(&fbdo, "/led/state", &ledState))
    {

      digitalWrite(LED_BUILTIN, ledState);
      Serial.println(ledState);
      Serial.print("LED ON ");
      Serial.println();

      // strip.setBrightness(ledBright);

      // colorWipe(strip.Color(red_value, green_value, blue_value), 50);
    }
    else
    {
      Serial.println(fbdo.errorReason().c_str());
    }
  }
}

// put function definitions here:
// void colorWipe(uint32_t color, int wait)
// {
//   for (int i = 0; i < strip.numPixels(); i++)
//   {
//     strip.setPixelColor(i, color);
//     strip.show();
//     delay(wait);
//   }
// }